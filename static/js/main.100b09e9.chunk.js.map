{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/app/App.js","serviceWorker.js","index.js"],"names":["Business","business","this","props","className","href","url","target","rel","src","imageSrc","alt","name","latitude","longitude","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","handleKeyPress","sortByOptions","inputRef","createRef","sortByOption","setState","searchYelp","event","value","which","keyCode","stopPropagation","current","focus","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","ref","type","placeholder","onChange","onKeyPress","Yelp","search","fetch","headers","Authorization","process","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","coordinates","App","then","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.100b09e9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Business.css\";\r\n\r\nclass Business extends React.Component {\r\n  render() {\r\n    const { business } = this.props;\r\n    return (\r\n      <div className=\"Business\">\r\n        <div className=\"image-container\">\r\n          <a href={business.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <img src={business.imageSrc} alt=\"\" />{\" \"}\r\n          </a>\r\n        </div>\r\n        <h2>{business.name}</h2>\r\n        <div className=\"Business-information\">\r\n          <div className=\"Business-address\">\r\n            <a\r\n              href={`https://maps.google.com/maps?q=${business.latitude},${business.longitude}`}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              {business.address}\r\n            </a>\r\n            <p>{business.city}</p>\r\n            <p>\r\n              {business.state}\r\n              {business.zipCode}\r\n            </p>\r\n          </div>\r\n          <div className=\"Business-reviews\">\r\n            <h3>{business.category}</h3>\r\n            <h3 className=\"rating\">Rating: {business.rating}</h3>\r\n            <p>{business.reviewCount} reviews</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Business;\r\n","import React from \"react\";\r\nimport \"./BusinessList.css\";\r\nimport Business from \"../Business/Business\";\r\n\r\nclass BusinessList extends React.Component {\r\n  render() {\r\n    if (this.props.businesses) {\r\n      return (\r\n        <div className=\"BusinessList\">\r\n          {this.props.businesses.map(business => {\r\n            return <Business key={business.id} business={business} />;\r\n          })}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <h3 className=\"not-here\">\r\n          We have no suggestions for that location yet...\r\n        </h3>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default BusinessList;\r\n","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: \"\",\r\n      location: \"\",\r\n      sortBy: \"best_match\",\r\n    };\r\n\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleLocationChange = this.handleLocationChange.bind(this);\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n\r\n    this.sortByOptions = {\r\n      \"Best Match\": \"best_match\",\r\n      \"Highest Rated\": \"rating\",\r\n      \"Most Reviews\": \"review_count\",\r\n    };\r\n\r\n    this.inputRef = React.createRef();\r\n  }\r\n\r\n  getSortByClass(sortByOption) {\r\n    if (this.state.sortBy === sortByOption) {\r\n      return \"active\";\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  handleSortByChange(sortByOption) {\r\n    this.setState(\r\n      {\r\n        sortBy: sortByOption,\r\n      },\r\n      () => {\r\n        if (this.state.location !== \"\") {\r\n          this.props.searchYelp(\r\n            this.state.term,\r\n            this.state.location,\r\n            this.state.sortBy\r\n          );\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  handleTermChange(event) {\r\n    this.setState({\r\n      term: event.target.value,\r\n    });\r\n  }\r\n\r\n  handleLocationChange(event) {\r\n    this.setState({\r\n      location: event.target.value,\r\n    });\r\n  }\r\n\r\n  handleSearch(event) {\r\n    if (this.state.location !== \"\") {\r\n      this.props.searchYelp(\r\n        this.state.term,\r\n        this.state.location,\r\n        this.state.sortBy\r\n      );\r\n    }\r\n  }\r\n\r\n  handleKeyPress(event) {\r\n    const code = event.which || event.keyCode;\r\n    if (code === 13) {\r\n      this.handleSearch();\r\n    }\r\n    event.stopPropagation();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.inputRef.current.focus();\r\n  }\r\n\r\n  renderSortByOptions() {\r\n    return Object.keys(this.sortByOptions).map((sortByOption) => {\r\n      let sortByOptionValue = this.sortByOptions[sortByOption];\r\n      return (\r\n        <li\r\n          className={this.getSortByClass(sortByOptionValue)}\r\n          key={sortByOptionValue}\r\n          onClick={this.handleSortByChange.bind(this, sortByOptionValue)}\r\n        >\r\n          {sortByOption}\r\n        </li>\r\n      );\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <div className=\"SearchBar-sort-options\">\r\n          <ul>{this.renderSortByOptions()}</ul>\r\n        </div>\r\n        <div className=\"SearchBar-fields\">\r\n          <input\r\n            ref={this.inputRef}\r\n            type=\"text\"\r\n            placeholder=\"Type of business, eg. 'bar'\"\r\n            onChange={this.handleTermChange}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Where is it located?\"\r\n            onChange={this.handleLocationChange}\r\n            onKeyPress={this.handleKeyPress}\r\n          />\r\n        </div>\r\n        <div className=\"SearchBar-submit\">\r\n          <button onClick={this.handleSearch}>Let's Go</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","const apiKey = process.env.REACT_APP_API_KEY;\r\n\r\nconst Yelp = {\r\n  async search(term, location, sortBy) {\r\n    const response = await fetch(\r\n      `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\r\n      {\r\n        headers: { Authorization: `Bearer ${apiKey}` }\r\n      }\r\n    );\r\n    const jsonResponse = await response.json();\r\n    if (jsonResponse.businesses) {\r\n      return jsonResponse.businesses.map(business => {\r\n        return {\r\n          id: business.id,\r\n          imageSrc: business.image_url,\r\n          name: business.name,\r\n          url: business.url,\r\n          address: business.location.address1,\r\n          city: business.location.city,\r\n          state: business.location.state,\r\n          zipCode: business.location.zip_code,\r\n          category: business.categories[0].title,\r\n          rating: business.rating,\r\n          reviewCount: business.review_count,\r\n          latitude: business.coordinates.latitude,\r\n          longitude: business.coordinates.longitude\r\n        };\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport default Yelp;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport BusinessList from \"../BusinessList/BusinessList\";\r\nimport SearchBar from \"../SearchBar/SearchBar\";\r\nimport Yelp from \"../../util/Yelp\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      businesses: [],\r\n    };\r\n    this.searchYelp = this.searchYelp.bind(this);\r\n  }\r\n\r\n  searchYelp(term, location, sortBy) {\r\n    Yelp.search(term, location, sortBy).then((businesses) => {\r\n      this.setState({\r\n        businesses: businesses,\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Get Out</h1>\r\n        <SearchBar searchYelp={this.searchYelp} />\r\n        <BusinessList businesses={this.state.businesses} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}